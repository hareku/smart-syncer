// Code generated by MockGen. DO NOT EDIT.
// Source: ./local.go

// Package syncermock is a generated GoMock package.
package syncermock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	syncer "github.com/hareku/smart-syncer/pkg/syncer"
)

// MockLocalStorage is a mock of LocalStorage interface.
type MockLocalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockLocalStorageMockRecorder
}

// MockLocalStorageMockRecorder is the mock recorder for MockLocalStorage.
type MockLocalStorageMockRecorder struct {
	mock *MockLocalStorage
}

// NewMockLocalStorage creates a new mock instance.
func NewMockLocalStorage(ctrl *gomock.Controller) *MockLocalStorage {
	mock := &MockLocalStorage{ctrl: ctrl}
	mock.recorder = &MockLocalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalStorage) EXPECT() *MockLocalStorageMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockLocalStorage) List(ctx context.Context, path string, depth int) ([]syncer.LocalObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, path, depth)
	ret0, _ := ret[0].([]syncer.LocalObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLocalStorageMockRecorder) List(ctx, path, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLocalStorage)(nil).List), ctx, path, depth)
}
